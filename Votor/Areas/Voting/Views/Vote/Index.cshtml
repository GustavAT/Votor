@model Controllers.VoteModel

@{
	ViewBag.Title = $"{Localizer["Vote"]}";
}

@if (!string.IsNullOrEmpty(ViewBag.StatusMessage))
{
    <div class="row row-no-margin-bottom">
        @{ await Html.RenderPartialAsync("_StatusMessage", $"{ViewBag.StatusMessage}");}
    </div>
}

<div class="row row-no-margin-bottom">
	<div class="@ViewBag.VoteTopCardLayout">
		<div class="card">
			<div class="card-content">
				<span class="card-title card-title-weight-600 @ViewBag.cardTextColor">@Model.EventName</span>
				<span class="black-text">
					@Model.EventDescription
                    @ViewBag.StatusMessage
				</span>
			</div>
		</div>
	</div>
</div>
<div class="row">
	@if (Model.Completed)
	{
		@foreach (var item in Model.Choices)
		{
			<div class="@ViewBag.VoteContentCardLayout">
				<div class="card @ViewBag.cardColor ">
					<div class="card-content @ViewBag.cardTextColor">
						<span class="card-title card-title-weight-400">@item.Question</span>
						<br />
						<p class="black-text">@item.Option</p>
					</div>
				</div>
			</div>

		}
	}
	else
	{
		using (Html.BeginForm("Complete", "Vote", FormMethod.Post))
		{
			@Html.HiddenFor(model => model.VoteId)
			@Html.HiddenFor(model => model.EventId)

			@Html.HiddenFor(model => model.PublicToken)
			@Html.HiddenFor(model => model.Token)

			@for (var i = 0; i < Model.Choices.Count; i++)
			{

				<div class="@ViewBag.VoteContentCardLayout">
					<div class="card @ViewBag.cardColor">
						<div class="card-content @ViewBag.cardTextColor">
							@Html.EditorFor(model => model.Choices[i])

						</div>
					</div>
				</div>
			}

			<div class="col s12 m12 l12 postition-center">
			    <button type="submit" class="btn-small waves-effect @ViewBag.MainColor waves-light btn-margin-top">
			        <i class="material-icons left">arrow_forward</i>@Localizer["Complete"]
			    </button>
			</div>

		}
	}

	
				
	
	

</div>

