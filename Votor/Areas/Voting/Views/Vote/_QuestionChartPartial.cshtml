@using System.Globalization
@using System.Web
@model Votor.Areas.Voting.Controllers.QuestionBarChartModel

@{
    var chartId = Guid.NewGuid();
}

@if (Model != null)
{
    <div class="card no-margin-bottom">
        <div class="card-content">
            <p class="card-title card-title-weight-400">@Model.Title</p>
            <div id="@chartId" style="width: 100%; min-height: 300px;"></div>
        </div>
    </div>
    

    <script type="text/javascript">
        var chart = echarts.init(document.getElementById("@chartId"));

        var data = initData();

        if (chart) {

            var options = {
                tooltip: {
                    trigger: "item",
                    formatter: "{a} <br />{b} : {c}"
                },
                legend: {
                    data: [
                        "@Html.Raw(HttpUtility.JavaScriptStringEncode(Localizer["Public"]))",
                        "@Html.Raw(HttpUtility.JavaScriptStringEncode(Localizer["Invites"]))",
                        "@Html.Raw(HttpUtility.JavaScriptStringEncode(Localizer["Score"]))"
                    ]
                },
                xAxis: {
                    type: "category",
                    data: data.xAxis,
                    splitLine: { show: false },
                    axisLabel: { interval: 0 }
                },
                yAxis: {
                    name: "@Html.Raw(HttpUtility.JavaScriptStringEncode(Localizer["Score"]))",
                    type: "value"
                },
                series: [
                    {
                        name: "@Html.Raw(HttpUtility.JavaScriptStringEncode(Localizer["Public"]))",
                        type: "bar",
                        barGap: "5%",
                        barWidth:"20%",
                        data: data.seriesPublic,
                        color: "#7b1fa2"
                    },
                    {
                        name: "@Html.Raw(HttpUtility.JavaScriptStringEncode(Localizer["Invites"]))",
                        type: "bar",
                        barGap: "5%",
                        barWidth: "20%",
                        data: data.seriesToken,
                        color: "#00acc1"
                    },
                    {
                        name: "@Html.Raw(HttpUtility.JavaScriptStringEncode(Localizer["Score"]))",
                        type: "bar",
                        barGap: "5%",
                        barWidth: "20%",
                        data: data.seriesScore,
                        color: "#ff3d00"
                    }
                ]
            };

            chart.setOption(options);

            window.votorCharts.push(chart);
        }

        function initData() {
            var data = {};
            data.xAxis = [];
            data.seriesPublic = [];
            data.seriesToken = [];
            data.seriesScore = [];

            @foreach (var value in Model.PublicValues) {
                <text>
                    data.xAxis.push("@Html.Raw(HttpUtility.JavaScriptStringEncode(value.Name))");
                    data.seriesPublic.push({
                        name: "@Html.Raw(HttpUtility.JavaScriptStringEncode(value.Name))",
                        value: @value.Value.ToString(CultureInfo.InvariantCulture)
                    });
                </text>
            }

            @foreach (var value in Model.TokenValues)
            {
                <text>
                    data.seriesToken.push({
                        name: "@Html.Raw(HttpUtility.JavaScriptStringEncode(value.Name))",
                        value: @value.Value.ToString(CultureInfo.InvariantCulture)
                    });

                </text>
            }

            @foreach (var value in Model.Score)
            {
                <text>
                    data.seriesScore.push({
                        name: "@Html.Raw(HttpUtility.JavaScriptStringEncode(value.Name))",
                        value: @value.Value.ToString(CultureInfo.InvariantCulture)
                    });

                </text>
            }

        return data;
        }
    </script>
}
