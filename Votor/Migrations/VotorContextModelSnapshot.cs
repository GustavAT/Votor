// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Votor.Areas.Portal.Data;

namespace Votor.Migrations
{
    [DbContext(typeof(VotorContext))]
    partial class VotorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Votor.Areas.Portal.Models.Choice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("OptionID");

                    b.Property<Guid>("QuestionID");

                    b.Property<Guid?>("VoteID");

                    b.HasKey("ID");

                    b.HasIndex("OptionID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("VoteID");

                    b.ToTable("Choice");
                });

            modelBuilder.Entity("Votor.Areas.Portal.Models.Event", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<bool>("ShowOverallWinner");

                    b.Property<DateTime?>("StartDate");

                    b.Property<Guid>("UserID");

                    b.HasKey("ID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Votor.Areas.Portal.Models.Option", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EventID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Votor.Areas.Portal.Models.Question", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EventID");

                    b.Property<string>("Text");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Votor.Areas.Portal.Models.Token", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EventID");

                    b.Property<string>("Name");

                    b.Property<Guid?>("OptionID");

                    b.Property<double>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("OptionID");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("Votor.Areas.Portal.Models.Vote", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CookieID");

                    b.Property<Guid>("EventID");

                    b.Property<bool>("IsCompleted");

                    b.Property<Guid?>("TokenID");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("TokenID");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Votor.Areas.Portal.Models.Choice", b =>
                {
                    b.HasOne("Votor.Areas.Portal.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionID");

                    b.HasOne("Votor.Areas.Portal.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Votor.Areas.Portal.Models.Vote", "Vote")
                        .WithMany("Choices")
                        .HasForeignKey("VoteID");
                });

            modelBuilder.Entity("Votor.Areas.Portal.Models.Option", b =>
                {
                    b.HasOne("Votor.Areas.Portal.Models.Event", "Event")
                        .WithMany("Options")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Votor.Areas.Portal.Models.Question", b =>
                {
                    b.HasOne("Votor.Areas.Portal.Models.Event", "Event")
                        .WithMany("Questions")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Votor.Areas.Portal.Models.Token", b =>
                {
                    b.HasOne("Votor.Areas.Portal.Models.Event", "Event")
                        .WithMany("Tokens")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Votor.Areas.Portal.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionID");
                });

            modelBuilder.Entity("Votor.Areas.Portal.Models.Vote", b =>
                {
                    b.HasOne("Votor.Areas.Portal.Models.Event", "Event")
                        .WithMany("Votes")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Votor.Areas.Portal.Models.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenID");
                });
#pragma warning restore 612, 618
        }
    }
}
